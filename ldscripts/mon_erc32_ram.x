/* Default linker script, for normal executables */
OUTPUT_FORMAT("elf32-sparc")
SEARCH_DIR("/opt/erc32-ada/erc-elf/lib");
/**************************************************************************
 *
 * Filename:
 *
 *   This file is automatically generated from erc32_ram.sc
 *
 * Description:
 *
 *   Linker script for Temic start kit, with code and data in RAM
 *
 * Revision:
 *
 *   : erc32_boot.sc,v 1.1 2010-10-11 10:19:05 nettleto Exp $
 *
 **************************************************************************/
STARTUP("art0.o")  /* private art0.o */
ENTRY(__warm_start)
/*
 * Set _STACK_SIZE to the size in bytes of the main stack. The main stack is
 * used by the main function and any other functions it calls. The minimum size
 * is the size of one frame plus the size of one interrupt frame, i.e. 396 bytes.
 * Add 104 bytes plus local data for each frame.
 */
_STACK_SIZE = 16K;
/*
 * Set _ISTACK_SIZE to the size of the interrupt stack. This stack is used by
 * all interrupt handlers so you must allow space for at least 14 interrupt
 * frames, i.e. 5544 bytes. Add to this the size of any local data, remembering
 * that library functions such as printf (that you may want to use for debugging)
 * use quite a lot.
 */
_ISTACK_SIZE = 16K;
/*
 * Set _PROM_SIZE to the size of the boot PROM. If you have no boot PROM then
 * use the value zero. Permissable sizes are: 128K, 256K, 512K, 1M, 2M, 4M, 8M
 * and 16M. Be sure to initialize the MEC memory configuration register
 * with the same size.
 */
_PROM_SIZE = 512K;
/*
 * Set _RAM_SIZE to the size of the RAM. Permissable values are 256K, 512K,
 * 1MB, 2Mb, 4Mb, 8Mb, 16Mb, and 32Mb. Be sure to initialize the MEC memory
 * configuration register with the same size.
 */
_RAM_SIZE = 2M;
/*
 * This is the value used to initialize the memory configuration register.
 * Ensure it agrees with the values for _PROM_SIZE and _RAM_SIZE. (See the
 * MEC documentation for details).
 */
_MCR_INIT = 0x00080c00;
/*
 * Set _RAM_START to the address of the first location in RAM. For the ERC32
 * chipset using the Temic MEC, this address is always 0x02000000.
 */
_RAM_START = 0x02000000;
/*
 * Set _RAM_START to the address of the first location in RAM. For the ERC32
 * chipset using the Temic MEC, this address is always 0x02000000.
 */
_PROM_START = 0x00000000;
_RAM_END = _RAM_START + _RAM_SIZE;

/*
 * 加载器躲在1728K-1792K空间内
 */

_ERC32_MON_END   = _RAM_END - 256K;
_ERC32_MON_START = _ERC32_MON_END - 64K;

/*
 * Start and end of interrupt stack
 */
_eistack = _ERC32_MON_END - 8;
_sistack = _ERC32_MON_END - _ISTACK_SIZE;
/*
 * Start and end of main stack
 */
_estack = _sistack - 8;
_sstack = _sistack - _STACK_SIZE;
/*
 * End of heap
 */
_eheap = _sstack - 8;
SECTIONS
{
  .init 0x00000000 (NOLOAD) : {
    *(.init)
  }

  .text _ERC32_MON_START : {
     _sitext  =  .;
     _stext  =  .;
    *(.text)
     _etext  =  .;
  }
   . = ALIGN(8);
  .rodata : {
     _sirodata  =  .;
     _srodata  =  .;
    *(.rodata)
    . = ALIGN(4);
     __CTOR_LIST__ = .;
     LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)
     *(.ctors)
     LONG(0)
     __CTOR_END__ = .;
     __DTOR_LIST__ = .;
     LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)
     *(.dtors)
     LONG(0)
     __DTOR_END__ = .;
     _erodata  =  .;
     . = ALIGN(8);
  }

  _sidata = .;
  .data _ERC32_MON_START + 16K : AT (_sidata) {
     _sdata  =  .;
    *(.data)
     . = ALIGN(8);
     _edata  =  .;
  }
   . = ALIGN(8);
  .bss : {
     __bss_start = .;
    *(.bss)
    *(COMMON)
     _end = .;
     . = ALIGN(8);
     _sheap = .;
  }
  .stab  0 (NOLOAD) :
  {
    [ .stab ]
  }
  .stabstr  0 (NOLOAD) :
  {
    [ .stabstr ]
  }
}
